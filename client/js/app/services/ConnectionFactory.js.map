{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["bd","version","stores","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","evento","target","result","onsuccess","bind","onerror","console","log","error","name","conn","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,Q,GAAK,Y;AACLC,a,GAAU,C;AACVC,Y,GAAS,CAAC,aAAD,C;AAEXC,gB;AACAC,W;;mCAESC,iB;AAEX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED;;;;;;;0CAGuB;;AAErB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,EAAtB,EAA0BC,OAA1B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,kBAAU;AACtCT,kCAAkBU,aAAlB,CAAgCC,OAAOC,MAAP,CAAcC,MAA9C;AACD,eAFD;AAGAR,0BAAYS,SAAZ,GAAwB,kBAAU;AAChC,oBAAI,CAAChB,UAAL,EAAiB;AACfA,+BAAaa,OAAOC,MAAP,CAAcC,MAA3B;AACAd,0BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAY,CAAG,CAAlC;AACD;AACDI,wBAAQL,UAAR;AACD,eAPD;AAQAO,0BAAYW,OAAZ,GAAsB,kBAAU;AAC9BC,wBAAQC,GAAR,CAAYP,OAAOC,MAAP,CAAcO,KAA1B;AACAf,uBAAOO,OAAOC,MAAP,CAAcO,KAAd,CAAoBC,IAA3B;AACD,eAHD;AAID,aAlBM,CAAP;AAmBD;;;4CAEwB;AACvBrB;AACAD,yBAAa,IAAb;AACD;;;wCAEoBuB,I,EAAM;AACzBxB,mBAAOyB,OAAP,CAAe,iBAAS;AACtB,kBAAID,KAAKE,gBAAL,CAAsBC,QAAtB,CAA+BC,KAA/B,CAAJ,EAA2C;AACzCJ,qBAAKK,iBAAL,CAAuBD,KAAvB;AACD;AACDJ,mBAAKM,iBAAL,CAAuBF,KAAvB,EAA8B,EAAEG,eAAe,IAAjB,EAA9B;AACD,aALD;AAMD;;;;;;;;AACF","file":"ConnectionFactory.js","sourcesContent":["const bd = 'aluraframe';\nconst version = 4;\nconst stores = ['negociacoes'];\n\nlet connection;\nlet close;\n\nexport class ConnectionFactory {\n\n  constructor() {\n    throw new Error('ConnectionFactory n√£o pode ser instanciada');\n  }\n\n  /**\n   * @returns {Promise<IDBDatabase>}\n   */\n  static getConnection() {\n\n    return new Promise((resolve, reject) => {\n      var openRequest = window.indexedDB.open(bd, version);\n\n      openRequest.onupgradeneeded = evento => {\n        ConnectionFactory._createStores(evento.target.result);\n      };\n      openRequest.onsuccess = evento => {\n        if (!connection) {\n          connection = evento.target.result;\n          close = connection.close.bind(connection);\n          connection.close = function () { };\n        }\n        resolve(connection);\n      };\n      openRequest.onerror = evento => {\n        console.log(evento.target.error);\n        reject(evento.target.error.name);\n      };\n    });\n  }\n\n  static closeConnection() {\n    close();\n    connection = null;\n  }\n\n  static _createStores(conn) {\n    stores.forEach(store => {\n      if (conn.objectStoreNames.contains(store)) {\n        conn.deleteObjectStore(store);\n      }\n      conn.createObjectStore(store, { autoIncrement: true });\n    });\n  }\n};"]}